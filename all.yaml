apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web1
  template:
    metadata:
      labels:
        app: web1
    spec:
      containers:
      - name: app
        image: jmalloc/echo-server:latest
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: webapp1
spec:
  type: NodePort
  selector:
    app: web1
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web2
  template:
    metadata:
      labels:
        app: web2
    spec:
      containers:
      - name: app
        image: jmalloc/echo-server:latest
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: webapp2
spec:
  type: NodePort
  selector:
    app: web2
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-config
data:
  hello_world.lua: |
    core.register_service("hello_world", "tcp", function(applet)
      applet:send("s1")
    end)
  haproxy.cfg: |
    global
      lua-load /etc/haproxy/hello_world.lua
      ## stats socket /var/run/api.sock user haproxy group haproxy mode 660 level admin expose-fd listeners
      log stdout format raw local0 info

    defaults
      mode http
      timeout client 10s
      timeout connect 5s
      timeout server 10s
      timeout http-request 10s
      log global

    frontend stats
      bind *:8404
      stats enable
      stats uri /
      stats refresh 10s

    frontend myfrontend
      bind :8080
      default_backend webservers

    backend webservers
      server s1 webapp1.default.svc.cluster.local:8080 check
      server s2 webapp2.default.svc.cluster.local:8080 check
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: haproxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: haproxy
  template:
    metadata:
      labels:
        app: haproxy
    spec:
      containers:
      - name: haproxy
        image: haproxy:latest
        ports:
        - containerPort: 8080
        command:
        - haproxy
        - -f
        - /etc/haproxy/haproxy.cfg
        volumeMounts:
        - mountPath: /etc/haproxy
          name: haproxy-config
      volumes:
      - name: haproxy-config
        configMap:
          name: haproxy-config
---
apiVersion: v1
kind: Service
metadata:
  name: haproxy
spec:
  type: LoadBalancer
  selector:
    app: haproxy
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080          
